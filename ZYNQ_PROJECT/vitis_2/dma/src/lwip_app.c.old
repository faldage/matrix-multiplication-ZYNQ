/*
 * Copyright (C) 2009 - 2018 Xilinx, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

#include <stdio.h>

#include "xparameters.h"

#include "netif/xadapter.h"
#include "lwip/udp.h"
#include "platform.h"
#include "platform_config.h"

#include "xil_printf.h"


#include "xaxidma.h"
#include "dma.h"
#include "sleep.h"
#include "dma_bd/dma_bd.h"

#include "xil_cache.h"



static struct udp_pcb *udp8080_pcb = NULL;
static struct pbuf *udp8080_q = NULL;
static int udp8080_qlen = 0;
ip_addr_t target_addr;
char TargetHeader[8] = { 0, 0x00, 0x01, 0x00, 0x02 };
unsigned char ip_export[4];
unsigned char mac_export[6];

extern XAxiDma RX_AxiDma;
extern XAxiDma TX_AxiDma;

extern unsigned char DmaRxBuffer[MAX_DMA_LEN] ;
extern unsigned char DmaTxBuffer[MAX_DMA_LEN] ;
short DmaBufferTmp[MAX_DMA_LEN/sizeof(short)]__attribute__ ((aligned(64)));

/* for LWIP receive*/
u8 LWIPRxBuffer0[MAX_DMA_LEN] ;
u8 LWIPRxBuffer1[MAX_DMA_LEN] ;
u64 receive_len = 0;
int buffer_choose = 0;

/*
 * BD buffer
 */
extern u32 BdRXChainBuffer[BD_ALIGNMENT*16] ;
extern u32 BdTXChainBuffer[BD_ALIGNMENT*16] ;

extern int s2mm_flag ;
extern int mm2s_flag ;

short sent_buf[DATA_LENTH]  __attribute__ ((aligned(4096)));
short receive_buf[DATA_LENTH]  __attribute__ ((aligned(4096)));

int FrameLengthCurr = 0 ;


/* defined by each RAW mode application */
int start_udp(unsigned int port);
int transfer_data(const char *pData, int len, const ip_addr_t *addr) ;
int send_data(const char *frame, int data_len);

extern void XAxiDma_Read(u32 *BdChainBuffer, u16 BdCount, XAxiDma *AxiDma) ;
extern void XAxiDma_Write(u32 *BdChainBuffer, u16 BdCount, XAxiDma *AxiDma) ;
/* missing declaration in lwIP */
void lwip_init();


static struct netif server_netif;
struct netif *echo_netif;


void
print_ip(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void
print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}


void print_app_header() {
	xil_printf("\n\r\n\r-----AN108 lwIP UDP DEMO ------\n\r");
	xil_printf("UDP packets sent to port 8000\n\r");
}




int lwip_loop()
{

	ip_addr_t ipaddr, netmask, gw;


	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] =
	{ 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };

	echo_netif = &server_netif;


	init_platform();


	/* initliaze IP addresses to be used */
	IP4_ADDR(&ipaddr,  192, 168,   2, 168);
	IP4_ADDR(&netmask, 255, 255, 255,  0);
	IP4_ADDR(&gw,      192, 168,   2,  1);

	print_app_header();

	lwip_init();


	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, &ipaddr, &netmask,
						&gw, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}

	netif_set_default(echo_netif);

	/* now enable interrupts */
	platform_enable_interrupts();

	/* specify that the network if is up */
	netif_set_up(echo_netif);



	print_ip_settings(&ipaddr, &netmask, &gw);
	memcpy(ip_export, &ipaddr, 4);
	memcpy(mac_export, &mac_ethernet_address, 6);


	/* start the application (web server, rxtest, txtest, etc..) */
	start_udp(8000);

	/* Start ADC channel 0 */
//	XAxiDma_Read(BdRXChainBuffer, BD_COUNT, &RX_AxiDma) ;
//	XAxiDma_Write(BdTXChainBuffer, BD_COUNT, &TX_AxiDma) ;
	int len;
	int resevr_len;
	/* receive and process packets */
	while (1) {
		xemacif_input(echo_netif);
		XAxiDma_Read(BdRXChainBuffer, BD_COUNT, &RX_AxiDma);
		if(s2mm_flag >= 0)
		{
			Xil_DCacheInvalidateRange((u32) DmaRxBuffer, MAX_DMA_LEN);
			//XAxiDma_Read(BdRXChainBuffer, BD_COUNT, &RX_AxiDma);

			/*if(strlen(DmaRxBuffer) == 0 DATA_LENTH) == 0)
			{
				s2mm_flag = -1;
				break;
			}*/
			/*else
			{
				len= sizeof(DATA_LENTH)/1024;
				resevr_len = sizeof(DATA_LENTH) - len * 1024;
			}*/
			len= DATA_LENTH/960;
			resevr_len = DATA_LENTH - len * 960;
			for(int i = 0; i < len; i++)
			{
				send_data((const char *) DmaRxBuffer + i*960, 960);
				//xil_printf("Send Count: %d\r\n",i);
//				sleep(0.00005);
//				usleep(50);
			}
			if(resevr_len != 0)
			{
				send_data((const char *) DmaRxBuffer + len*960, resevr_len);
				//xil_printf("Send Count: %d\r\n",len);
				//sleep(0.00005);
//				usleep(50);
			}
			/*XAxiDma_Read(BdRXChainBuffer, BD_COUNT, &RX_AxiDma) ;
			send_data(&DmaRxBuffer, sizeof(DmaRxBuffer));*/
			s2mm_flag = -1;
			memset(DmaRxBuffer, 0,MAX_DMA_LEN);
		}

	}

	/* never reached */
	cleanup_platform();

	return 0;
}

/*
 * Transfer data with udp
 *
 * @param frame is data pointer will be send
 * @param data_len is the data length
 *
 */
int send_data(const char *frame, int data_len)
{
	struct pbuf *q;
	q = pbuf_alloc(PBUF_TRANSPORT, data_len, PBUF_POOL);
	memcpy(q->payload, frame, data_len);
	udp_sendto(udp8080_pcb, q, &target_addr, 8000);
	//udp_sendto(udp8080_pcb, q, &target_addr, 8000);
	pbuf_free(q);
	return 0;
}

void LWIP_RX_POPSESS(/*struct pbuf *p_rx*/ u8* payload, u16_t len)
{
	if(mm2s_flag >0 && buffer_choose == 0)
	{
		memset(LWIPRxBuffer1, 0,MAX_DMA_LEN);
		mm2s_flag = -1;
	}
	else if(mm2s_flag >0 && buffer_choose == 1)
	{
		memset(LWIPRxBuffer0, 0,MAX_DMA_LEN);
		mm2s_flag = -1;
	}
	if((receive_len + /*p_rx->*/len) < DATA_LENTH)
	{
		if(buffer_choose == 0)
			//strcat(LWIPRxBuffer0, p_rx->payload);
			memcpy(LWIPRxBuffer0+receive_len,/*p_rx->*/payload,/*p_rx->*/len);
			//LWIPRxBuffer0 += p_rx->payload;
		else
			//strcat(LWIPRxBuffer1, p_rx->payload);
			//LWIPRxBuffer1 += p_rx->payload;
			memcpy(LWIPRxBuffer1+receive_len,/*p_rx->*/payload,/*p_rx->*/len);
		receive_len += /*p_rx->*/len;
		buffer_choose = buffer_choose;
	}
	else if((receive_len + /*p_rx->*/len) == DATA_LENTH)
	{
		if(buffer_choose == 0)
		{
//			strcat(LWIPRxBuffer0, p_rx->payload);
			//LWIPRxBuffer0 += p_rx->payload;
			memcpy(LWIPRxBuffer0+receive_len,/*p_rx->*/payload,/*p_rx->*/len);
			memcpy(DmaTxBuffer, LWIPRxBuffer0, DATA_LENTH);
		}
		else
		{
//			strcat(LWIPRxBuffer1, p_rx->payload);
			//LWIPRxBuffer1 += p_rx->payload;
			memcpy(LWIPRxBuffer1+receive_len,/*p_rx->*/payload,/*p_rx->*/len);
			memcpy(DmaTxBuffer, LWIPRxBuffer1, DATA_LENTH);
		}
		Xil_DCacheFlushRange((UINTPTR)DmaTxBuffer, DATA_LENTH);
		XAxiDma_Write(BdTXChainBuffer, BD_COUNT, &TX_AxiDma) ;
		buffer_choose = ~buffer_choose;
		receive_len = 0;
	}
	else
	{
		if(buffer_choose == 0)
		{
			//strcat(LWIPRxBuffer1, p_rx->payload);
			memcpy(LWIPRxBuffer1+receive_len,/*p_rx->*/payload,/*p_rx->*/len);
			memcpy(DmaTxBuffer, LWIPRxBuffer0, receive_len);
		}
		else
		{
			//strcat(LWIPRxBuffer0, p_rx->payload);
			memcpy(LWIPRxBuffer0+receive_len,/*p_rx->*/payload,/*p_rx->*/len);
			memcpy(DmaTxBuffer, LWIPRxBuffer1, receive_len);
		}
		Xil_DCacheFlushRange((UINTPTR)DmaTxBuffer, receive_len);
		XAxiDma_Write(BdTXChainBuffer, BD_COUNT, &TX_AxiDma) ;
		buffer_choose = ~buffer_choose;
		receive_len = /*p_rx->*/len;
	}
}
/*
 * Call back funtion for udp receiver
 *
 * @param arg is argument
 * @param pcb is udp pcb pointer
 * @param p_rx is pbuf pointer
 * @param addr is IP address
 * @param port is udp port
 *
 */
void udp_recive(void *arg, struct udp_pcb *pcb, struct pbuf *p_rx,
		const ip_addr_t *addr, u16_t port) {
		u8* payload = p_rx->payload;
		u16_t len = p_rx->len;
		pbuf_free(p_rx);
		send_data(payload,len);
		xil_printf("receive\n");
		sleep(1);
		//LWIP_RX_POPSESS(/*p_rx*/ payload,  len);
		//xil_printf("RX_INFO, LEN=%d\r\n",p_rx->len);
		//pbuf_free(p_rx);

}
/*
 * Create new pcb, bind pcb and port, set call back function
 */
int start_udp(unsigned int port) {
	err_t err;
	udp8080_pcb = udp_new();
	if (!udp8080_pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}
	/* bind to specified @port */
	err = udp_bind(udp8080_pcb, IP_ADDR_ANY, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}
	udp_recv(udp8080_pcb, udp_recive, 0);
	IP4_ADDR(&target_addr, 192,168,2,127);

	return 0;
}
